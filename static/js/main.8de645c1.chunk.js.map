{"version":3,"sources":["containers/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["useState","products","setProducts","displayedProducts","setDisplayedProducts","styles","setStyles","search","setSearch","searchStyles","setSearchStyles","delivTimes","setDelivTimes","searchDelivTimes","setSearchDelivTimes","useEffect","a","async","fetch","response","json","furniture_styles","fetchProducts","reg","RegExp","console","log","searchDelivTimesDay","forEach","delivTime","push","filtered","filter","product","name","match","every","style","furniture_style","includes","delivDay","delivery_time","MenuProps","PaperProps","maxHeight","ITEM_HEIGHT","width","marginTop","length","CircularProgress","className","Grid","container","spacing","item","xs","sm","value","onChange","e","target","type","placeholder","FormControl","InputLabel","Select","multiple","input","Input","renderValue","selected","join","map","MenuItem","key","ListItemText","primary","Checkbox","color","checked","indexOf","Paper","elevation","price","toString","replace","description","substring","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8de645c1.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport './Home.css'\nimport { Grid, Paper, FormControl, InputLabel, Select, MenuItem, Checkbox, ListItemText, Input, CircularProgress } from '@material-ui/core'\n\nexport default () => {\n  const [products, setProducts] = useState([])\n  const [displayedProducts, setDisplayedProducts] = useState([])\n  const [styles, setStyles] = useState([])\n  const [search, setSearch] = useState('')\n  const [searchStyles, setSearchStyles] = useState([])\n  const [delivTimes, setDelivTimes] = useState([])\n  const [searchDelivTimes, setSearchDelivTimes] = useState([])\n  \n  const fetchProducts = async () => {\n    const response = await fetch('https://www.mocky.io/v2/5c9105cb330000112b649af8')\n    const { products, furniture_styles } = await response.json()\n    setProducts(products)\n    setDisplayedProducts(products)\n    setStyles(furniture_styles)\n  }\n\n  useEffect(() => {\n    fetchProducts()\n    setDelivTimes(['1 week', '2 weeks', '1 month', '2 months'])\n  }, [])\n  \n  useEffect(() => {\n    let reg = new RegExp(search, 'gi')\n    console.log(searchDelivTimes)\n    let searchDelivTimesDay = []\n    searchDelivTimes.forEach(delivTime => {\n      if(delivTime === '1 week') {\n        searchDelivTimesDay.push(7)\n      } else if(delivTime === '2 weeks') {\n        searchDelivTimesDay.push(14)\n      } else if(delivTime === '1 month') {\n        searchDelivTimesDay.push(30)\n      } else {\n        searchDelivTimesDay.push(60)\n      }\n    })\n    let filtered = products.filter(product => (\n      product.name.match(reg) && \n      searchStyles.every(style => product.furniture_style.includes(style)) &&\n      searchDelivTimesDay.every(delivDay => product.delivery_time <= delivDay)\n    ))\n    setDisplayedProducts(filtered)\n  }, [search, products, searchStyles, searchDelivTimes])\n\n  const ITEM_HEIGHT = 48;\n  const ITEM_PADDING_TOP = 8;\n  const MenuProps = {\n    PaperProps: {\n      style: {\n        maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n        width: 250,\n        marginTop: '45px',\n      },\n    },\n  }\n\n  if(products.length === 0) {\n    return (\n      <CircularProgress className=\"center\" />\n    )\n  }\n  return (\n    <>\n      <div className=\"header\">\n        <div className=\"container\">\n          <Grid container spacing={3}>\n            <Grid item xs={12} sm={6}>\n              <input value={search} onChange={e => setSearch(e.target.value)} type=\"text\" placeholder=\"Search Furniture\" className=\"search\">\n              </input>\n            </Grid>\n          </Grid>\n          <Grid container spacing={3} className=\"form-container\">\n            <Grid item xs={12} sm={6}>\n              <FormControl className=\"form-control\">\n                <InputLabel className=\"input-label\">Furniture Style</InputLabel>\n                <Select\n                  className=\"select\"\n                  multiple\n                  value={searchStyles}\n                  onChange={e => setSearchStyles(e.target.value)}\n                  input={<Input />}\n                  renderValue={selected => selected.join(', ')}\n                  MenuProps={MenuProps}\n                >\n                  {styles.map(name => (\n                    <MenuItem key={name} value={name}>\n                      <ListItemText primary={name} />\n                      <Checkbox color=\"primary\" checked={searchStyles.indexOf(name) > -1} />\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl className=\"form-control\">\n                <InputLabel className=\"input-label\">Delivery Time</InputLabel>\n                <Select\n                  className=\"select\"\n                  multiple\n                  value={searchDelivTimes}\n                  onChange={e => setSearchDelivTimes(e.target.value)}\n                  input={<Input />}\n                  renderValue={selected => selected.join(', ')}\n                  MenuProps={MenuProps}\n                >\n                  {delivTimes.map(name => (\n                    <MenuItem key={name} value={name}>\n                      <ListItemText primary={name} />\n                      <Checkbox color=\"primary\" checked={searchDelivTimes.indexOf(name) > -1} />\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n          </Grid>\n        </div>\n      </div>\n      <div className=\"content\">\n        <div className=\"container\">\n        {\n          displayedProducts.length === 0 && (\n            <p className=\"center\">No search result found.</p>\n          )\n        }\n        <Grid container spacing={3}>\n          {displayedProducts.map(product => (\n            <Grid key={product.name} item xs={12} sm={6}>\n              <Paper elevation={2} className=\"furn-card\">\n                <Grid container spacing={2}>\n                  <Grid item xs={12} sm={8}>\n                    <h3>{product.name}</h3>\n                  </Grid>\n                  <Grid item xs={12} sm={4}>\n                    <h4 className=\"price\">IDR {product.price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</h4>\n                  </Grid>\n                </Grid>\n                <p>{product.description.substring(0, 114)}...</p>\n                <p className=\"furn-styles\">{product.furniture_style.join(', ')}</p>\n                <h4 className=\"furn-delivery\">{product.delivery_time} Days</h4>\n              </Paper>\n            </Grid>\n            )\n          )}\n        </Grid>\n        </div>\n      </div>\n    </>\n  )\n}","import React from 'react';\nimport './App.css';\nimport Home from './containers/Home'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}